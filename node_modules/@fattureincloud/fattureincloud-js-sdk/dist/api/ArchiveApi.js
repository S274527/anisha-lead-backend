"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateArchiveDocumentResponse = _interopRequireDefault(require("../model/CreateArchiveDocumentResponse"));
var _GetArchiveDocumentResponse = _interopRequireDefault(require("../model/GetArchiveDocumentResponse"));
var _ListArchiveDocumentsResponse = _interopRequireDefault(require("../model/ListArchiveDocumentsResponse"));
var _ModifyArchiveDocumentResponse = _interopRequireDefault(require("../model/ModifyArchiveDocumentResponse"));
var _UploadArchiveAttachmentResponse = _interopRequireDefault(require("../model/UploadArchiveAttachmentResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Archive service.
* @module api/ArchiveApi
* @version 2.0.25
*/
var ArchiveApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new ArchiveApi.
    * @alias module:api/ArchiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function ArchiveApi(apiClient) {
    _classCallCheck(this, ArchiveApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Archive Document
     * Creates a new archive document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArchiveDocumentRequest} [createArchiveDocumentRequest] The Archive Document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateArchiveDocumentResponse} and HTTP response
     */
  _createClass(ArchiveApi, [{
    key: "createArchiveDocumentWithHttpInfo",
    value: function createArchiveDocumentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createArchiveDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createArchiveDocument");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateArchiveDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/archive', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Archive Document
       * Creates a new archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateArchiveDocumentRequest} opts.createArchiveDocumentRequest The Archive Document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateArchiveDocumentResponse}
       */
  }, {
    key: "createArchiveDocument",
    value: function createArchiveDocument(companyId, opts) {
      return this.createArchiveDocumentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Archive Document
       * Deletes the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteArchiveDocumentWithHttpInfo",
    value: function deleteArchiveDocumentWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteArchiveDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/archive/{document_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Archive Document
       * Deletes the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteArchiveDocument",
    value: function deleteArchiveDocument(companyId, documentId) {
      return this.deleteArchiveDocumentWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Archive Document
       * Gets the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetArchiveDocumentResponse} and HTTP response
       */
  }, {
    key: "getArchiveDocumentWithHttpInfo",
    value: function getArchiveDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getArchiveDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetArchiveDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/archive/{document_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Archive Document
       * Gets the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetArchiveDocumentResponse}
       */
  }, {
    key: "getArchiveDocument",
    value: function getArchiveDocument(companyId, documentId, opts) {
      return this.getArchiveDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Archive Documents
       * Lists the archive documents.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [q] Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListArchiveDocumentsResponse} and HTTP response
       */
  }, {
    key: "listArchiveDocumentsWithHttpInfo",
    value: function listArchiveDocumentsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listArchiveDocuments");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort,
        page: opts.page,
        per_page: opts.perPage,
        q: opts.q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListArchiveDocumentsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/archive', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Archive Documents
       * Lists the archive documents.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.q Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListArchiveDocumentsResponse}
       */
  }, {
    key: "listArchiveDocuments",
    value: function listArchiveDocuments(companyId, opts) {
      return this.listArchiveDocumentsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Archive Document
       * Modifies the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyArchiveDocumentRequest} [modifyArchiveDocumentRequest] Modified Archive Document
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyArchiveDocumentResponse} and HTTP response
       */
  }, {
    key: "modifyArchiveDocumentWithHttpInfo",
    value: function modifyArchiveDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.modifyArchiveDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyArchiveDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyArchiveDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/archive/{document_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Archive Document
       * Modifies the specified archive document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyArchiveDocumentRequest} opts.modifyArchiveDocumentRequest Modified Archive Document
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyArchiveDocumentResponse}
       */
  }, {
    key: "modifyArchiveDocument",
    value: function modifyArchiveDocument(companyId, documentId, opts) {
      return this.modifyArchiveDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Upload Archive Document Attachment
       * Uploads an attachment destined to an archive document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [filename] Attachment file name
       * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadArchiveAttachmentResponse} and HTTP response
       */
  }, {
    key: "uploadArchiveDocumentAttachmentWithHttpInfo",
    value: function uploadArchiveDocumentAttachmentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadArchiveDocumentAttachment");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        filename: opts.filename,
        attachment: opts.attachment
      };
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _UploadArchiveAttachmentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/archive/attachment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Upload Archive Document Attachment
       * Uploads an attachment destined to an archive document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.filename Attachment file name
       * @param {File} opts.attachment Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadArchiveAttachmentResponse}
       */
  }, {
    key: "uploadArchiveDocumentAttachment",
    value: function uploadArchiveDocumentAttachment(companyId, opts) {
      return this.uploadArchiveDocumentAttachmentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ArchiveApi;
}();