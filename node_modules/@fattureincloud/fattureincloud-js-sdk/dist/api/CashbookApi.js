"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateCashbookEntryResponse = _interopRequireDefault(require("../model/CreateCashbookEntryResponse"));
var _GetCashbookEntryResponse = _interopRequireDefault(require("../model/GetCashbookEntryResponse"));
var _ListCashbookEntriesResponse = _interopRequireDefault(require("../model/ListCashbookEntriesResponse"));
var _ModifyCashbookEntryResponse = _interopRequireDefault(require("../model/ModifyCashbookEntryResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Cashbook service.
* @module api/CashbookApi
* @version 2.0.25
*/
var CashbookApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new CashbookApi.
    * @alias module:api/CashbookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function CashbookApi(apiClient) {
    _classCallCheck(this, CashbookApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Cashbook Entry
     * Creates a new cashbook entry.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCashbookEntryRequest} [createCashbookEntryRequest] Cashbook entry.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCashbookEntryResponse} and HTTP response
     */
  _createClass(CashbookApi, [{
    key: "createCashbookEntryWithHttpInfo",
    value: function createCashbookEntryWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createCashbookEntryRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createCashbookEntry");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateCashbookEntryResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/cashbook', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Cashbook Entry
       * Creates a new cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateCashbookEntryRequest} opts.createCashbookEntryRequest Cashbook entry.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCashbookEntryResponse}
       */
  }, {
    key: "createCashbookEntry",
    value: function createCashbookEntry(companyId, opts) {
      return this.createCashbookEntryWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Cashbook Entry
       * Deletes the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteCashbookEntryWithHttpInfo",
    value: function deleteCashbookEntryWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteCashbookEntry");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteCashbookEntry");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/cashbook/{document_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Cashbook Entry
       * Deletes the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteCashbookEntry",
    value: function deleteCashbookEntry(companyId, documentId) {
      return this.deleteCashbookEntryWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Cashbook Entry
       * Gets the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCashbookEntryResponse} and HTTP response
       */
  }, {
    key: "getCashbookEntryWithHttpInfo",
    value: function getCashbookEntryWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCashbookEntry");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getCashbookEntry");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetCashbookEntryResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/cashbook/{document_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Cashbook Entry
       * Gets the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCashbookEntryResponse}
       */
  }, {
    key: "getCashbookEntry",
    value: function getCashbookEntry(companyId, documentId, opts) {
      return this.getCashbookEntryWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Cashbook Entries
       * Lists the cashbook entries.
       * @param {Number} companyId The ID of the company.
       * @param {String} dateFrom Start date.
       * @param {String} dateTo End date.
       * @param {Object} opts Optional parameters
       * @param {Number} [year] Filter cashbook by year.
       * @param {module:model/String} [type] Filter cashbook by type.
       * @param {Number} [paymentAccountId] Filter by payment account.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCashbookEntriesResponse} and HTTP response
       */
  }, {
    key: "listCashbookEntriesWithHttpInfo",
    value: function listCashbookEntriesWithHttpInfo(companyId, dateFrom, dateTo, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listCashbookEntries");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling listCashbookEntries");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling listCashbookEntries");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        date_from: dateFrom,
        date_to: dateTo,
        year: opts.year,
        type: opts.type,
        payment_account_id: opts.paymentAccountId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCashbookEntriesResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/cashbook', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Cashbook Entries
       * Lists the cashbook entries.
       * @param {Number} companyId The ID of the company.
       * @param {String} dateFrom Start date.
       * @param {String} dateTo End date.
       * @param {Object} opts Optional parameters
       * @param {Number} opts.year Filter cashbook by year.
       * @param {module:model/String} opts.type Filter cashbook by type.
       * @param {Number} opts.paymentAccountId Filter by payment account.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCashbookEntriesResponse}
       */
  }, {
    key: "listCashbookEntries",
    value: function listCashbookEntries(companyId, dateFrom, dateTo, opts) {
      return this.listCashbookEntriesWithHttpInfo(companyId, dateFrom, dateTo, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Cashbook Entry
       * Modifies the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyCashbookEntryRequest} [modifyCashbookEntryRequest] Cashbook Entry
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyCashbookEntryResponse} and HTTP response
       */
  }, {
    key: "modifyCashbookEntryWithHttpInfo",
    value: function modifyCashbookEntryWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.modifyCashbookEntryRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyCashbookEntry");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyCashbookEntry");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyCashbookEntryResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/cashbook/{document_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Cashbook Entry
       * Modifies the specified cashbook entry.
       * @param {Number} companyId The ID of the company.
       * @param {String} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyCashbookEntryRequest} opts.modifyCashbookEntryRequest Cashbook Entry
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyCashbookEntryResponse}
       */
  }, {
    key: "modifyCashbookEntry",
    value: function modifyCashbookEntry(companyId, documentId, opts) {
      return this.modifyCashbookEntryWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return CashbookApi;
}();