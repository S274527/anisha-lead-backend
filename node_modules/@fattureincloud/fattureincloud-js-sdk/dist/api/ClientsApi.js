"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateClientResponse = _interopRequireDefault(require("../model/CreateClientResponse"));
var _GetClientResponse = _interopRequireDefault(require("../model/GetClientResponse"));
var _ListClientsResponse = _interopRequireDefault(require("../model/ListClientsResponse"));
var _ModifyClientResponse = _interopRequireDefault(require("../model/ModifyClientResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Clients service.
* @module api/ClientsApi
* @version 2.0.25
*/
var ClientsApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new ClientsApi.
    * @alias module:api/ClientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function ClientsApi(apiClient) {
    _classCallCheck(this, ClientsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Client
     * Creates a new client.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateClientRequest} [createClientRequest] The client to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateClientResponse} and HTTP response
     */
  _createClass(ClientsApi, [{
    key: "createClientWithHttpInfo",
    value: function createClientWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createClientRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createClient");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateClientResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/clients', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Client
       * Creates a new client.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateClientRequest} opts.createClientRequest The client to create
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateClientResponse}
       */
  }, {
    key: "createClient",
    value: function createClient(companyId, opts) {
      return this.createClientWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Client
       * Deletes the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteClientWithHttpInfo",
    value: function deleteClientWithHttpInfo(companyId, clientId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteClient");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteClient");
      }
      var pathParams = {
        company_id: companyId,
        client_id: clientId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/entities/clients/{client_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Client
       * Deletes the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteClient",
    value: function deleteClient(companyId, clientId) {
      return this.deleteClientWithHttpInfo(companyId, clientId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Client
       * Gets the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetClientResponse} and HTTP response
       */
  }, {
    key: "getClientWithHttpInfo",
    value: function getClientWithHttpInfo(companyId, clientId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getClient");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClient");
      }
      var pathParams = {
        company_id: companyId,
        client_id: clientId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetClientResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/clients/{client_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Client
       * Gets the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetClientResponse}
       */
  }, {
    key: "getClient",
    value: function getClient(companyId, clientId, opts) {
      return this.getClientWithHttpInfo(companyId, clientId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Clients
       * Lists the clients.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [q] Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListClientsResponse} and HTTP response
       */
  }, {
    key: "listClientsWithHttpInfo",
    value: function listClientsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listClients");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort,
        page: opts.page,
        per_page: opts.perPage,
        q: opts.q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListClientsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/clients', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Clients
       * Lists the clients.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.q Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListClientsResponse}
       */
  }, {
    key: "listClients",
    value: function listClients(companyId, opts) {
      return this.listClientsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Client
       * Modifies the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyClientRequest} [modifyClientRequest] The modified Client. First level parameters are managed in delta mode.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyClientResponse} and HTTP response
       */
  }, {
    key: "modifyClientWithHttpInfo",
    value: function modifyClientWithHttpInfo(companyId, clientId, opts) {
      opts = opts || {};
      var postBody = opts.modifyClientRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyClient");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling modifyClient");
      }
      var pathParams = {
        company_id: companyId,
        client_id: clientId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyClientResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/clients/{client_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Client
       * Modifies the specified client.
       * @param {Number} companyId The ID of the company.
       * @param {Number} clientId The ID of the client.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyClientRequest} opts.modifyClientRequest The modified Client. First level parameters are managed in delta mode.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyClientResponse}
       */
  }, {
    key: "modifyClient",
    value: function modifyClient(companyId, clientId, opts) {
      return this.modifyClientWithHttpInfo(companyId, clientId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ClientsApi;
}();