"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _GetCompanyInfoResponse = _interopRequireDefault(require("../model/GetCompanyInfoResponse"));
var _GetCompanyPlanUsageResponse = _interopRequireDefault(require("../model/GetCompanyPlanUsageResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Companies service.
* @module api/CompaniesApi
* @version 2.0.25
*/
var CompaniesApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new CompaniesApi.
    * @alias module:api/CompaniesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function CompaniesApi(apiClient) {
    _classCallCheck(this, CompaniesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Get Company Info
     * Gets the company detailed info.
     * @param {Number} companyId The ID of the company.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompanyInfoResponse} and HTTP response
     */
  _createClass(CompaniesApi, [{
    key: "getCompanyInfoWithHttpInfo",
    value: function getCompanyInfoWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompanyInfo");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetCompanyInfoResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/company/info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Company Info
       * Gets the company detailed info.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompanyInfoResponse}
       */
  }, {
    key: "getCompanyInfo",
    value: function getCompanyInfo(companyId) {
      return this.getCompanyInfoWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Company Plan Usage
       * Gets the company limits usage.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} category Category
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCompanyPlanUsageResponse} and HTTP response
       */
  }, {
    key: "getCompanyPlanUsageWithHttpInfo",
    value: function getCompanyPlanUsageWithHttpInfo(companyId, category) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getCompanyPlanUsage");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getCompanyPlanUsage");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        category: category
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetCompanyPlanUsageResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/company/plan_usage', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Company Plan Usage
       * Gets the company limits usage.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} category Category
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCompanyPlanUsageResponse}
       */
  }, {
    key: "getCompanyPlanUsage",
    value: function getCompanyPlanUsage(companyId, category) {
      return this.getCompanyPlanUsageWithHttpInfo(companyId, category).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return CompaniesApi;
}();