"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ListArchiveCategoriesResponse = _interopRequireDefault(require("../model/ListArchiveCategoriesResponse"));
var _ListCitiesResponse = _interopRequireDefault(require("../model/ListCitiesResponse"));
var _ListCostCentersResponse = _interopRequireDefault(require("../model/ListCostCentersResponse"));
var _ListCountriesResponse = _interopRequireDefault(require("../model/ListCountriesResponse"));
var _ListCurrenciesResponse = _interopRequireDefault(require("../model/ListCurrenciesResponse"));
var _ListDeliveryNotesDefaultCausalsResponse = _interopRequireDefault(require("../model/ListDeliveryNotesDefaultCausalsResponse"));
var _ListDetailedCountriesResponse = _interopRequireDefault(require("../model/ListDetailedCountriesResponse"));
var _ListLanguagesResponse = _interopRequireDefault(require("../model/ListLanguagesResponse"));
var _ListPaymentAccountsResponse = _interopRequireDefault(require("../model/ListPaymentAccountsResponse"));
var _ListPaymentMethodsResponse = _interopRequireDefault(require("../model/ListPaymentMethodsResponse"));
var _ListProductCategoriesResponse = _interopRequireDefault(require("../model/ListProductCategoriesResponse"));
var _ListReceivedDocumentCategoriesResponse = _interopRequireDefault(require("../model/ListReceivedDocumentCategoriesResponse"));
var _ListRevenueCentersResponse = _interopRequireDefault(require("../model/ListRevenueCentersResponse"));
var _ListTemplatesResponse = _interopRequireDefault(require("../model/ListTemplatesResponse"));
var _ListUnitsOfMeasureResponse = _interopRequireDefault(require("../model/ListUnitsOfMeasureResponse"));
var _ListVatTypesResponse = _interopRequireDefault(require("../model/ListVatTypesResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Info service.
* @module api/InfoApi
* @version 2.0.25
*/
var InfoApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new InfoApi.
    * @alias module:api/InfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function InfoApi(apiClient) {
    _classCallCheck(this, InfoApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * List Archive Categories
     * Lists the archive categories.
     * @param {Number} companyId The ID of the company.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListArchiveCategoriesResponse} and HTTP response
     */
  _createClass(InfoApi, [{
    key: "listArchiveCategoriesWithHttpInfo",
    value: function listArchiveCategoriesWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listArchiveCategories");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListArchiveCategoriesResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/archive_categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Archive Categories
       * Lists the archive categories.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListArchiveCategoriesResponse}
       */
  }, {
    key: "listArchiveCategories",
    value: function listArchiveCategories(companyId) {
      return this.listArchiveCategoriesWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Cities
       * Lists the Italian cities.
       * @param {Object} opts Optional parameters
       * @param {String} [postalCode] Postal code for filtering.
       * @param {String} [city] City for filtering (ignored if postal_code is passed).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCitiesResponse} and HTTP response
       */
  }, {
    key: "listCitiesWithHttpInfo",
    value: function listCitiesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        postal_code: opts.postalCode,
        city: opts.city
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCitiesResponse["default"];
      return this.apiClient.callApi('/info/cities', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Cities
       * Lists the Italian cities.
       * @param {Object} opts Optional parameters
       * @param {String} opts.postalCode Postal code for filtering.
       * @param {String} opts.city City for filtering (ignored if postal_code is passed).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCitiesResponse}
       */
  }, {
    key: "listCities",
    value: function listCities(opts) {
      return this.listCitiesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Cost Centers
       * Lists the cost centers.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCostCentersResponse} and HTTP response
       */
  }, {
    key: "listCostCentersWithHttpInfo",
    value: function listCostCentersWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listCostCenters");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCostCentersResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/cost_centers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Cost Centers
       * Lists the cost centers.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCostCentersResponse}
       */
  }, {
    key: "listCostCenters",
    value: function listCostCenters(companyId) {
      return this.listCostCentersWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Countries
       * Lists the supported countries.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCountriesResponse} and HTTP response
       */
  }, {
    key: "listCountriesWithHttpInfo",
    value: function listCountriesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCountriesResponse["default"];
      return this.apiClient.callApi('/info/countries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Countries
       * Lists the supported countries.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCountriesResponse}
       */
  }, {
    key: "listCountries",
    value: function listCountries() {
      return this.listCountriesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Currencies
       * Lists the supported currencies.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCurrenciesResponse} and HTTP response
       */
  }, {
    key: "listCurrenciesWithHttpInfo",
    value: function listCurrenciesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListCurrenciesResponse["default"];
      return this.apiClient.callApi('/info/currencies', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Currencies
       * Lists the supported currencies.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCurrenciesResponse}
       */
  }, {
    key: "listCurrencies",
    value: function listCurrencies() {
      return this.listCurrenciesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Delivery Notes Default Causals
       * Lists the delivery note default causals.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListDeliveryNotesDefaultCausalsResponse} and HTTP response
       */
  }, {
    key: "listDeliveryNotesDefaultCausalsWithHttpInfo",
    value: function listDeliveryNotesDefaultCausalsWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListDeliveryNotesDefaultCausalsResponse["default"];
      return this.apiClient.callApi('/info/dn_causals', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Delivery Notes Default Causals
       * Lists the delivery note default causals.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListDeliveryNotesDefaultCausalsResponse}
       */
  }, {
    key: "listDeliveryNotesDefaultCausals",
    value: function listDeliveryNotesDefaultCausals() {
      return this.listDeliveryNotesDefaultCausalsWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Detailed Countries
       * Lists the supported countries.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListDetailedCountriesResponse} and HTTP response
       */
  }, {
    key: "listDetailedCountriesWithHttpInfo",
    value: function listDetailedCountriesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListDetailedCountriesResponse["default"];
      return this.apiClient.callApi('/info/detailed_countries', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Detailed Countries
       * Lists the supported countries.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListDetailedCountriesResponse}
       */
  }, {
    key: "listDetailedCountries",
    value: function listDetailedCountries() {
      return this.listDetailedCountriesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Languages
       * Lists the supported languages.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListLanguagesResponse} and HTTP response
       */
  }, {
    key: "listLanguagesWithHttpInfo",
    value: function listLanguagesWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListLanguagesResponse["default"];
      return this.apiClient.callApi('/info/languages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Languages
       * Lists the supported languages.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListLanguagesResponse}
       */
  }, {
    key: "listLanguages",
    value: function listLanguages() {
      return this.listLanguagesWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Payment Accounts
       * Lists the available payment accounts.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentAccountsResponse} and HTTP response
       */
  }, {
    key: "listPaymentAccountsWithHttpInfo",
    value: function listPaymentAccountsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listPaymentAccounts");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListPaymentAccountsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/payment_accounts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Payment Accounts
       * Lists the available payment accounts.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentAccountsResponse}
       */
  }, {
    key: "listPaymentAccounts",
    value: function listPaymentAccounts(companyId, opts) {
      return this.listPaymentAccountsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Payment Methods
       * Lists the available payment methods.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentMethodsResponse} and HTTP response
       */
  }, {
    key: "listPaymentMethodsWithHttpInfo",
    value: function listPaymentMethodsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listPaymentMethods");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListPaymentMethodsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/payment_methods', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Payment Methods
       * Lists the available payment methods.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentMethodsResponse}
       */
  }, {
    key: "listPaymentMethods",
    value: function listPaymentMethods(companyId, opts) {
      return this.listPaymentMethodsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Product Categories
       * Lists the product categories.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} context Categories resource type.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProductCategoriesResponse} and HTTP response
       */
  }, {
    key: "listProductCategoriesWithHttpInfo",
    value: function listProductCategoriesWithHttpInfo(companyId, context) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listProductCategories");
      }
      // verify the required parameter 'context' is set
      if (context === undefined || context === null) {
        throw new Error("Missing the required parameter 'context' when calling listProductCategories");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        context: context
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListProductCategoriesResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/product_categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Product Categories
       * Lists the product categories.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} context Categories resource type.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProductCategoriesResponse}
       */
  }, {
    key: "listProductCategories",
    value: function listProductCategories(companyId, context) {
      return this.listProductCategoriesWithHttpInfo(companyId, context).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Received Document Categories
       * Lists the received document categories.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListReceivedDocumentCategoriesResponse} and HTTP response
       */
  }, {
    key: "listReceivedDocumentCategoriesWithHttpInfo",
    value: function listReceivedDocumentCategoriesWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listReceivedDocumentCategories");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListReceivedDocumentCategoriesResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/received_document_categories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Received Document Categories
       * Lists the received document categories.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListReceivedDocumentCategoriesResponse}
       */
  }, {
    key: "listReceivedDocumentCategories",
    value: function listReceivedDocumentCategories(companyId) {
      return this.listReceivedDocumentCategoriesWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Revenue Centers
       * Lists the revenue centers.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListRevenueCentersResponse} and HTTP response
       */
  }, {
    key: "listRevenueCentersWithHttpInfo",
    value: function listRevenueCentersWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listRevenueCenters");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListRevenueCentersResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/revenue_centers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Revenue Centers
       * Lists the revenue centers.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListRevenueCentersResponse}
       */
  }, {
    key: "listRevenueCenters",
    value: function listRevenueCenters(companyId) {
      return this.listRevenueCentersWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Templates
       * Lists the available templates.
       * @param {Object} opts Optional parameters
       * @param {module:model/String} [type = 'all')] Type of the templates.
       * @param {Boolean} [byType = false)] [Only if type=all] If true, splits the list in objects, grouping templates by type.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTemplatesResponse} and HTTP response
       */
  }, {
    key: "listTemplatesWithHttpInfo",
    value: function listTemplatesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        type: opts.type,
        by_type: opts.byType
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListTemplatesResponse["default"];
      return this.apiClient.callApi('/info/templates', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Templates
       * Lists the available templates.
       * @param {Object} opts Optional parameters
       * @param {module:model/String} opts.type Type of the templates. (default to 'all')
       * @param {Boolean} opts.byType [Only if type=all] If true, splits the list in objects, grouping templates by type. (default to false)
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTemplatesResponse}
       */
  }, {
    key: "listTemplates",
    value: function listTemplates(opts) {
      return this.listTemplatesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Units of Measure
       * Lists the units of measure.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListUnitsOfMeasureResponse} and HTTP response
       */
  }, {
    key: "listUnitsOfMeasureWithHttpInfo",
    value: function listUnitsOfMeasureWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListUnitsOfMeasureResponse["default"];
      return this.apiClient.callApi('/info/measures', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Units of Measure
       * Lists the units of measure.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListUnitsOfMeasureResponse}
       */
  }, {
    key: "listUnitsOfMeasure",
    value: function listUnitsOfMeasure() {
      return this.listUnitsOfMeasureWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Vat Types
       * Lists the available vat types.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListVatTypesResponse} and HTTP response
       */
  }, {
    key: "listVatTypesWithHttpInfo",
    value: function listVatTypesWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listVatTypes");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListVatTypesResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/info/vat_types', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Vat Types
       * Lists the available vat types.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListVatTypesResponse}
       */
  }, {
    key: "listVatTypes",
    value: function listVatTypes(companyId, opts) {
      return this.listVatTypesWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return InfoApi;
}();