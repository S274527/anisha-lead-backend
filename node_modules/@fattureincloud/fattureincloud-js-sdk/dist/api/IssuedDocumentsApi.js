"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateIssuedDocumentResponse = _interopRequireDefault(require("../model/CreateIssuedDocumentResponse"));
var _GetEmailDataResponse = _interopRequireDefault(require("../model/GetEmailDataResponse"));
var _GetExistingIssuedDocumentTotalsResponse = _interopRequireDefault(require("../model/GetExistingIssuedDocumentTotalsResponse"));
var _GetIssuedDocumentPreCreateInfoResponse = _interopRequireDefault(require("../model/GetIssuedDocumentPreCreateInfoResponse"));
var _GetIssuedDocumentResponse = _interopRequireDefault(require("../model/GetIssuedDocumentResponse"));
var _GetNewIssuedDocumentTotalsResponse = _interopRequireDefault(require("../model/GetNewIssuedDocumentTotalsResponse"));
var _JoinIssuedDocumentsResponse = _interopRequireDefault(require("../model/JoinIssuedDocumentsResponse"));
var _ListIssuedDocumentsResponse = _interopRequireDefault(require("../model/ListIssuedDocumentsResponse"));
var _ModifyIssuedDocumentResponse = _interopRequireDefault(require("../model/ModifyIssuedDocumentResponse"));
var _TransformIssuedDocumentResponse = _interopRequireDefault(require("../model/TransformIssuedDocumentResponse"));
var _UploadIssuedDocumentAttachmentResponse = _interopRequireDefault(require("../model/UploadIssuedDocumentAttachmentResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* IssuedDocuments service.
* @module api/IssuedDocumentsApi
* @version 2.0.25
*/
var IssuedDocumentsApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new IssuedDocumentsApi.
    * @alias module:api/IssuedDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function IssuedDocumentsApi(apiClient) {
    _classCallCheck(this, IssuedDocumentsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Issued Document
     * Creates a new document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateIssuedDocumentRequest} [createIssuedDocumentRequest] The Issued Document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateIssuedDocumentResponse} and HTTP response
     */
  _createClass(IssuedDocumentsApi, [{
    key: "createIssuedDocumentWithHttpInfo",
    value: function createIssuedDocumentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createIssuedDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createIssuedDocument");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateIssuedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Issued Document
       * Creates a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateIssuedDocumentRequest} opts.createIssuedDocumentRequest The Issued Document
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateIssuedDocumentResponse}
       */
  }, {
    key: "createIssuedDocument",
    value: function createIssuedDocument(companyId, opts) {
      return this.createIssuedDocumentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Issued Document
       * Deletes the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteIssuedDocumentWithHttpInfo",
    value: function deleteIssuedDocumentWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteIssuedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteIssuedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Issued Document
       * Deletes the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteIssuedDocument",
    value: function deleteIssuedDocument(companyId, documentId) {
      return this.deleteIssuedDocumentWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Issued Document Attachment
       * Removes the attachment of the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteIssuedDocumentAttachmentWithHttpInfo",
    value: function deleteIssuedDocumentAttachmentWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteIssuedDocumentAttachment");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteIssuedDocumentAttachment");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/attachment', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Issued Document Attachment
       * Removes the attachment of the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteIssuedDocumentAttachment",
    value: function deleteIssuedDocumentAttachment(companyId, documentId) {
      return this.deleteIssuedDocumentAttachmentWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Email Data
       * Gets the pre-compiled email details.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEmailDataResponse} and HTTP response
       */
  }, {
    key: "getEmailDataWithHttpInfo",
    value: function getEmailDataWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEmailData");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getEmailData");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetEmailDataResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/email', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Email Data
       * Gets the pre-compiled email details.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEmailDataResponse}
       */
  }, {
    key: "getEmailData",
    value: function getEmailData(companyId, documentId) {
      return this.getEmailDataWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Existing Issued Document Totals
       * Returns the totals for a specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetExistingIssuedDocumentTotalsRequest} [getExistingIssuedDocumentTotalsRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExistingIssuedDocumentTotalsResponse} and HTTP response
       */
  }, {
    key: "getExistingIssuedDocumentTotalsWithHttpInfo",
    value: function getExistingIssuedDocumentTotalsWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.getExistingIssuedDocumentTotalsRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getExistingIssuedDocumentTotals");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getExistingIssuedDocumentTotals");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetExistingIssuedDocumentTotalsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/totals', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Existing Issued Document Totals
       * Returns the totals for a specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetExistingIssuedDocumentTotalsRequest} opts.getExistingIssuedDocumentTotalsRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExistingIssuedDocumentTotalsResponse}
       */
  }, {
    key: "getExistingIssuedDocumentTotals",
    value: function getExistingIssuedDocumentTotals(companyId, documentId, opts) {
      return this.getExistingIssuedDocumentTotalsWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Issued Document
       * Gets the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIssuedDocumentResponse} and HTTP response
       */
  }, {
    key: "getIssuedDocumentWithHttpInfo",
    value: function getIssuedDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getIssuedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getIssuedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetIssuedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Issued Document
       * Gets the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIssuedDocumentResponse}
       */
  }, {
    key: "getIssuedDocument",
    value: function getIssuedDocument(companyId, documentId, opts) {
      return this.getIssuedDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Issued Document Pre-Create Info
       * Retrieves the information useful while creating a new document.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the issued document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetIssuedDocumentPreCreateInfoResponse} and HTTP response
       */
  }, {
    key: "getIssuedDocumentPreCreateInfoWithHttpInfo",
    value: function getIssuedDocumentPreCreateInfoWithHttpInfo(companyId, type) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getIssuedDocumentPreCreateInfo");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getIssuedDocumentPreCreateInfo");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        type: type
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetIssuedDocumentPreCreateInfoResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Issued Document Pre-Create Info
       * Retrieves the information useful while creating a new document.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the issued document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetIssuedDocumentPreCreateInfoResponse}
       */
  }, {
    key: "getIssuedDocumentPreCreateInfo",
    value: function getIssuedDocumentPreCreateInfo(companyId, type) {
      return this.getIssuedDocumentPreCreateInfoWithHttpInfo(companyId, type).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get New Issued Document Totals
       * Returns the totals for a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetNewIssuedDocumentTotalsRequest} [getNewIssuedDocumentTotalsRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetNewIssuedDocumentTotalsResponse} and HTTP response
       */
  }, {
    key: "getNewIssuedDocumentTotalsWithHttpInfo",
    value: function getNewIssuedDocumentTotalsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.getNewIssuedDocumentTotalsRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getNewIssuedDocumentTotals");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetNewIssuedDocumentTotalsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/totals', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get New Issued Document Totals
       * Returns the totals for a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetNewIssuedDocumentTotalsRequest} opts.getNewIssuedDocumentTotalsRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetNewIssuedDocumentTotalsResponse}
       */
  }, {
    key: "getNewIssuedDocumentTotals",
    value: function getNewIssuedDocumentTotals(companyId, opts) {
      return this.getNewIssuedDocumentTotalsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Join Issued Documents
       * Joins issued documents.
       * @param {Number} companyId The ID of the company.
       * @param {String} ids Ids of the documents.
       * @param {Object} opts Optional parameters
       * @param {module:model/Number} [group] Group items.
       * @param {module:model/Number} [eInvoice] New document e_invoice.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/JoinIssuedDocumentsResponse} and HTTP response
       */
  }, {
    key: "joinIssuedDocumentsWithHttpInfo",
    value: function joinIssuedDocumentsWithHttpInfo(companyId, ids, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling joinIssuedDocuments");
      }
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling joinIssuedDocuments");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        ids: ids,
        group: opts.group,
        e_invoice: opts.eInvoice
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _JoinIssuedDocumentsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/join', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Join Issued Documents
       * Joins issued documents.
       * @param {Number} companyId The ID of the company.
       * @param {String} ids Ids of the documents.
       * @param {Object} opts Optional parameters
       * @param {module:model/Number} opts.group Group items.
       * @param {module:model/Number} opts.eInvoice New document e_invoice.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/JoinIssuedDocumentsResponse}
       */
  }, {
    key: "joinIssuedDocuments",
    value: function joinIssuedDocuments(companyId, ids, opts) {
      return this.joinIssuedDocumentsWithHttpInfo(companyId, ids, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Issued Documents
       * Lists the issued documents.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the issued document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [q] Query for filtering the results.
       * @param {module:model/Number} [inclusive] (Only for type = delivery_notes) Include invoices delivery notes.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListIssuedDocumentsResponse} and HTTP response
       */
  }, {
    key: "listIssuedDocumentsWithHttpInfo",
    value: function listIssuedDocumentsWithHttpInfo(companyId, type, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listIssuedDocuments");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listIssuedDocuments");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        type: type,
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort,
        page: opts.page,
        per_page: opts.perPage,
        q: opts.q,
        inclusive: opts.inclusive
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListIssuedDocumentsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Issued Documents
       * Lists the issued documents.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the issued document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.q Query for filtering the results.
       * @param {module:model/Number} opts.inclusive (Only for type = delivery_notes) Include invoices delivery notes.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListIssuedDocumentsResponse}
       */
  }, {
    key: "listIssuedDocuments",
    value: function listIssuedDocuments(companyId, type, opts) {
      return this.listIssuedDocumentsWithHttpInfo(companyId, type, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Issued Document
       * Modifies the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyIssuedDocumentRequest} [modifyIssuedDocumentRequest] The modified document
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyIssuedDocumentResponse} and HTTP response
       */
  }, {
    key: "modifyIssuedDocumentWithHttpInfo",
    value: function modifyIssuedDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.modifyIssuedDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyIssuedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyIssuedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyIssuedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Issued Document
       * Modifies the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyIssuedDocumentRequest} opts.modifyIssuedDocumentRequest The modified document
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyIssuedDocumentResponse}
       */
  }, {
    key: "modifyIssuedDocument",
    value: function modifyIssuedDocument(companyId, documentId, opts) {
      return this.modifyIssuedDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Schedule Email
       * Schedules the sending of a document by email.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ScheduleEmailRequest} [scheduleEmailRequest] Email Schedule
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "scheduleEmailWithHttpInfo",
    value: function scheduleEmailWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.scheduleEmailRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling scheduleEmail");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling scheduleEmail");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/email', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Schedule Email
       * Schedules the sending of a document by email.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ScheduleEmailRequest} opts.scheduleEmailRequest Email Schedule
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "scheduleEmail",
    value: function scheduleEmail(companyId, documentId, opts) {
      return this.scheduleEmailWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Transform Issued Document
       * Transforms the document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} originalDocumentId Original document id.
       * @param {String} newType New document type.
       * @param {Object} opts Optional parameters
       * @param {module:model/Number} [eInvoice] New document e_invoice.
       * @param {module:model/Number} [transformKeepCopy] Keep the old document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransformIssuedDocumentResponse} and HTTP response
       */
  }, {
    key: "transformIssuedDocumentWithHttpInfo",
    value: function transformIssuedDocumentWithHttpInfo(companyId, originalDocumentId, newType, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling transformIssuedDocument");
      }
      // verify the required parameter 'originalDocumentId' is set
      if (originalDocumentId === undefined || originalDocumentId === null) {
        throw new Error("Missing the required parameter 'originalDocumentId' when calling transformIssuedDocument");
      }
      // verify the required parameter 'newType' is set
      if (newType === undefined || newType === null) {
        throw new Error("Missing the required parameter 'newType' when calling transformIssuedDocument");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        original_document_id: originalDocumentId,
        new_type: newType,
        e_invoice: opts.eInvoice,
        transform_keep_copy: opts.transformKeepCopy
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TransformIssuedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/transform', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Transform Issued Document
       * Transforms the document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} originalDocumentId Original document id.
       * @param {String} newType New document type.
       * @param {Object} opts Optional parameters
       * @param {module:model/Number} opts.eInvoice New document e_invoice.
       * @param {module:model/Number} opts.transformKeepCopy Keep the old document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransformIssuedDocumentResponse}
       */
  }, {
    key: "transformIssuedDocument",
    value: function transformIssuedDocument(companyId, originalDocumentId, newType, opts) {
      return this.transformIssuedDocumentWithHttpInfo(companyId, originalDocumentId, newType, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Upload Issued Document Attachment
       * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [filename] Attachment file name
       * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadIssuedDocumentAttachmentResponse} and HTTP response
       */
  }, {
    key: "uploadIssuedDocumentAttachmentWithHttpInfo",
    value: function uploadIssuedDocumentAttachmentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadIssuedDocumentAttachment");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        filename: opts.filename,
        attachment: opts.attachment
      };
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _UploadIssuedDocumentAttachmentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/attachment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Upload Issued Document Attachment
       * Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.filename Attachment file name
       * @param {File} opts.attachment Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadIssuedDocumentAttachmentResponse}
       */
  }, {
    key: "uploadIssuedDocumentAttachment",
    value: function uploadIssuedDocumentAttachment(companyId, opts) {
      return this.uploadIssuedDocumentAttachmentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return IssuedDocumentsApi;
}();