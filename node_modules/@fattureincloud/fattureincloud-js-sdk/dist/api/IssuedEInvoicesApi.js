"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _GetEInvoiceRejectionReasonResponse = _interopRequireDefault(require("../model/GetEInvoiceRejectionReasonResponse"));
var _SendEInvoiceResponse = _interopRequireDefault(require("../model/SendEInvoiceResponse"));
var _VerifyEInvoiceXmlResponse = _interopRequireDefault(require("../model/VerifyEInvoiceXmlResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* IssuedEInvoices service.
* @module api/IssuedEInvoicesApi
* @version 2.0.25
*/
var IssuedEInvoicesApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new IssuedEInvoicesApi.
    * @alias module:api/IssuedEInvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function IssuedEInvoicesApi(apiClient) {
    _classCallCheck(this, IssuedEInvoicesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Get E-Invoice Rejection Reason
     * Get e-invoice rejection reason
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEInvoiceRejectionReasonResponse} and HTTP response
     */
  _createClass(IssuedEInvoicesApi, [{
    key: "getEInvoiceRejectionReasonWithHttpInfo",
    value: function getEInvoiceRejectionReasonWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEInvoiceRejectionReason");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getEInvoiceRejectionReason");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetEInvoiceRejectionReasonResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get E-Invoice Rejection Reason
       * Get e-invoice rejection reason
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEInvoiceRejectionReasonResponse}
       */
  }, {
    key: "getEInvoiceRejectionReason",
    value: function getEInvoiceRejectionReason(companyId, documentId) {
      return this.getEInvoiceRejectionReasonWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get E-Invoice XML
       * Downloads the e-invoice in XML format.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {Boolean} [includeAttachment] Include the attachment to the XML e-invoice.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
       */
  }, {
    key: "getEInvoiceXmlWithHttpInfo",
    value: function getEInvoiceXmlWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEInvoiceXml");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getEInvoiceXml");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        include_attachment: opts.includeAttachment
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['text/xml'];
      var returnType = 'String';
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/e_invoice/xml', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get E-Invoice XML
       * Downloads the e-invoice in XML format.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {Boolean} opts.includeAttachment Include the attachment to the XML e-invoice.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
       */
  }, {
    key: "getEInvoiceXml",
    value: function getEInvoiceXml(companyId, documentId, opts) {
      return this.getEInvoiceXmlWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Send E-Invoice
       * Sends the e-invoice to SDI.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/SendEInvoiceRequest} [sendEInvoiceRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendEInvoiceResponse} and HTTP response
       */
  }, {
    key: "sendEInvoiceWithHttpInfo",
    value: function sendEInvoiceWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.sendEInvoiceRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling sendEInvoice");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling sendEInvoice");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendEInvoiceResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/e_invoice/send', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Send E-Invoice
       * Sends the e-invoice to SDI.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/SendEInvoiceRequest} opts.sendEInvoiceRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendEInvoiceResponse}
       */
  }, {
    key: "sendEInvoice",
    value: function sendEInvoice(companyId, documentId, opts) {
      return this.sendEInvoiceWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Verify E-Invoice XML
       * Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyEInvoiceXmlResponse} and HTTP response
       */
  }, {
    key: "verifyEInvoiceXmlWithHttpInfo",
    value: function verifyEInvoiceXmlWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling verifyEInvoiceXml");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling verifyEInvoiceXml");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _VerifyEInvoiceXmlResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Verify E-Invoice XML
       * Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyEInvoiceXmlResponse}
       */
  }, {
    key: "verifyEInvoiceXml",
    value: function verifyEInvoiceXml(companyId, documentId) {
      return this.verifyEInvoiceXmlWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return IssuedEInvoicesApi;
}();