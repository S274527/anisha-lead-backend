"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateReceiptResponse = _interopRequireDefault(require("../model/CreateReceiptResponse"));
var _GetReceiptPreCreateInfoResponse = _interopRequireDefault(require("../model/GetReceiptPreCreateInfoResponse"));
var _GetReceiptResponse = _interopRequireDefault(require("../model/GetReceiptResponse"));
var _GetReceiptsMonthlyTotalsResponse = _interopRequireDefault(require("../model/GetReceiptsMonthlyTotalsResponse"));
var _ListReceiptsResponse = _interopRequireDefault(require("../model/ListReceiptsResponse"));
var _ModifyReceiptResponse = _interopRequireDefault(require("../model/ModifyReceiptResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Receipts service.
* @module api/ReceiptsApi
* @version 2.0.25
*/
var ReceiptsApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new ReceiptsApi.
    * @alias module:api/ReceiptsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function ReceiptsApi(apiClient) {
    _classCallCheck(this, ReceiptsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Receipt
     * Creates a new receipt.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateReceiptRequest} [createReceiptRequest] The Receipt to create.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateReceiptResponse} and HTTP response
     */
  _createClass(ReceiptsApi, [{
    key: "createReceiptWithHttpInfo",
    value: function createReceiptWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createReceiptRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createReceipt");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateReceiptResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Receipt
       * Creates a new receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateReceiptRequest} opts.createReceiptRequest The Receipt to create.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateReceiptResponse}
       */
  }, {
    key: "createReceipt",
    value: function createReceipt(companyId, opts) {
      return this.createReceiptWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Receipt
       * Deletes the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteReceiptWithHttpInfo",
    value: function deleteReceiptWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteReceipt");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteReceipt");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/receipts/{document_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Receipt
       * Deletes the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteReceipt",
    value: function deleteReceipt(companyId, documentId) {
      return this.deleteReceiptWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Receipt
       * Gets the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceiptResponse} and HTTP response
       */
  }, {
    key: "getReceiptWithHttpInfo",
    value: function getReceiptWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceipt");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getReceipt");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetReceiptResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts/{document_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Receipt
       * Gets the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceiptResponse}
       */
  }, {
    key: "getReceipt",
    value: function getReceipt(companyId, documentId, opts) {
      return this.getReceiptWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Receipt Pre-Create Info
       * Retrieves the information useful while creating a new receipt.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceiptPreCreateInfoResponse} and HTTP response
       */
  }, {
    key: "getReceiptPreCreateInfoWithHttpInfo",
    value: function getReceiptPreCreateInfoWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceiptPreCreateInfo");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetReceiptPreCreateInfoResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts/info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Receipt Pre-Create Info
       * Retrieves the information useful while creating a new receipt.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceiptPreCreateInfoResponse}
       */
  }, {
    key: "getReceiptPreCreateInfo",
    value: function getReceiptPreCreateInfo(companyId) {
      return this.getReceiptPreCreateInfoWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Receipts Monthly Totals
       * Returns the monthly totals by year and receipt type.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type Receipt Type
       * @param {String} year Year for which you want monthly totals
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceiptsMonthlyTotalsResponse} and HTTP response
       */
  }, {
    key: "getReceiptsMonthlyTotalsWithHttpInfo",
    value: function getReceiptsMonthlyTotalsWithHttpInfo(companyId, type, year) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceiptsMonthlyTotals");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getReceiptsMonthlyTotals");
      }
      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getReceiptsMonthlyTotals");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        type: type,
        year: year
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetReceiptsMonthlyTotalsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts/monthly_totals', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Receipts Monthly Totals
       * Returns the monthly totals by year and receipt type.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type Receipt Type
       * @param {String} year Year for which you want monthly totals
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceiptsMonthlyTotalsResponse}
       */
  }, {
    key: "getReceiptsMonthlyTotals",
    value: function getReceiptsMonthlyTotals(companyId, type, year) {
      return this.getReceiptsMonthlyTotalsWithHttpInfo(companyId, type, year).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Receipts
       * Lists the receipts.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {String} [q] Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListReceiptsResponse} and HTTP response
       */
  }, {
    key: "listReceiptsWithHttpInfo",
    value: function listReceiptsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listReceipts");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        page: opts.page,
        per_page: opts.perPage,
        sort: opts.sort,
        q: opts.q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListReceiptsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Receipts
       * Lists the receipts.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {String} opts.q Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListReceiptsResponse}
       */
  }, {
    key: "listReceipts",
    value: function listReceipts(companyId, opts) {
      return this.listReceiptsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Receipt
       * Modifies the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyReceiptRequest} [modifyReceiptRequest] Modified receipt.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyReceiptResponse} and HTTP response
       */
  }, {
    key: "modifyReceiptWithHttpInfo",
    value: function modifyReceiptWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.modifyReceiptRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyReceipt");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyReceipt");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyReceiptResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/receipts/{document_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Receipt
       * Modifies the specified receipt.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyReceiptRequest} opts.modifyReceiptRequest Modified receipt.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyReceiptResponse}
       */
  }, {
    key: "modifyReceipt",
    value: function modifyReceipt(companyId, documentId, opts) {
      return this.modifyReceiptWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ReceiptsApi;
}();