"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateReceivedDocumentResponse = _interopRequireDefault(require("../model/CreateReceivedDocumentResponse"));
var _GetExistingReceivedDocumentTotalsResponse = _interopRequireDefault(require("../model/GetExistingReceivedDocumentTotalsResponse"));
var _GetNewReceivedDocumentTotalsResponse = _interopRequireDefault(require("../model/GetNewReceivedDocumentTotalsResponse"));
var _GetReceivedDocumentPreCreateInfoResponse = _interopRequireDefault(require("../model/GetReceivedDocumentPreCreateInfoResponse"));
var _GetReceivedDocumentResponse = _interopRequireDefault(require("../model/GetReceivedDocumentResponse"));
var _ListReceivedDocumentsResponse = _interopRequireDefault(require("../model/ListReceivedDocumentsResponse"));
var _ModifyReceivedDocumentResponse = _interopRequireDefault(require("../model/ModifyReceivedDocumentResponse"));
var _UploadReceivedDocumentAttachmentResponse = _interopRequireDefault(require("../model/UploadReceivedDocumentAttachmentResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* ReceivedDocuments service.
* @module api/ReceivedDocumentsApi
* @version 2.0.25
*/
var ReceivedDocumentsApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new ReceivedDocumentsApi.
    * @alias module:api/ReceivedDocumentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function ReceivedDocumentsApi(apiClient) {
    _classCallCheck(this, ReceivedDocumentsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Received Document
     * Creates a new document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateReceivedDocumentRequest} [createReceivedDocumentRequest] Document to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateReceivedDocumentResponse} and HTTP response
     */
  _createClass(ReceivedDocumentsApi, [{
    key: "createReceivedDocumentWithHttpInfo",
    value: function createReceivedDocumentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createReceivedDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createReceivedDocument");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateReceivedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Received Document
       * Creates a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateReceivedDocumentRequest} opts.createReceivedDocumentRequest Document to create
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateReceivedDocumentResponse}
       */
  }, {
    key: "createReceivedDocument",
    value: function createReceivedDocument(companyId, opts) {
      return this.createReceivedDocumentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Received Document
       * Deletes the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteReceivedDocumentWithHttpInfo",
    value: function deleteReceivedDocumentWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteReceivedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/received_documents/{document_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Received Document
       * Deletes the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteReceivedDocument",
    value: function deleteReceivedDocument(companyId, documentId) {
      return this.deleteReceivedDocumentWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Received Document Attachment
       * Removes the attachment of the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteReceivedDocumentAttachmentWithHttpInfo",
    value: function deleteReceivedDocumentAttachmentWithHttpInfo(companyId, documentId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteReceivedDocumentAttachment");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteReceivedDocumentAttachment");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/received_documents/{document_id}/attachment', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Received Document Attachment
       * Removes the attachment of the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteReceivedDocumentAttachment",
    value: function deleteReceivedDocumentAttachment(companyId, documentId) {
      return this.deleteReceivedDocumentAttachmentWithHttpInfo(companyId, documentId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Existing Received Document Totals
       * Returns the totals for the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetExistingReceivedDocumentTotalsRequest} [getExistingReceivedDocumentTotalsRequest] Received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExistingReceivedDocumentTotalsResponse} and HTTP response
       */
  }, {
    key: "getExistingReceivedDocumentTotalsWithHttpInfo",
    value: function getExistingReceivedDocumentTotalsWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.getExistingReceivedDocumentTotalsRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getExistingReceivedDocumentTotals");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getExistingReceivedDocumentTotals");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetExistingReceivedDocumentTotalsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/{document_id}/totals', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Existing Received Document Totals
       * Returns the totals for the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetExistingReceivedDocumentTotalsRequest} opts.getExistingReceivedDocumentTotalsRequest Received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExistingReceivedDocumentTotalsResponse}
       */
  }, {
    key: "getExistingReceivedDocumentTotals",
    value: function getExistingReceivedDocumentTotals(companyId, documentId, opts) {
      return this.getExistingReceivedDocumentTotalsWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get New Received Document Totals
       * Returns the totals for a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetNewReceivedDocumentTotalsRequest} [getNewReceivedDocumentTotalsRequest] Received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetNewReceivedDocumentTotalsResponse} and HTTP response
       */
  }, {
    key: "getNewReceivedDocumentTotalsWithHttpInfo",
    value: function getNewReceivedDocumentTotalsWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.getNewReceivedDocumentTotalsRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getNewReceivedDocumentTotals");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _GetNewReceivedDocumentTotalsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/totals', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get New Received Document Totals
       * Returns the totals for a new document.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/GetNewReceivedDocumentTotalsRequest} opts.getNewReceivedDocumentTotalsRequest Received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetNewReceivedDocumentTotalsResponse}
       */
  }, {
    key: "getNewReceivedDocumentTotals",
    value: function getNewReceivedDocumentTotals(companyId, opts) {
      return this.getNewReceivedDocumentTotalsWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Received Document
       * Gets the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceivedDocumentResponse} and HTTP response
       */
  }, {
    key: "getReceivedDocumentWithHttpInfo",
    value: function getReceivedDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getReceivedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetReceivedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/{document_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Received Document
       * Gets the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceivedDocumentResponse}
       */
  }, {
    key: "getReceivedDocument",
    value: function getReceivedDocument(companyId, documentId, opts) {
      return this.getReceivedDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Received Document Pre-Create Info
       * Retrieves the information useful while creating a new document.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetReceivedDocumentPreCreateInfoResponse} and HTTP response
       */
  }, {
    key: "getReceivedDocumentPreCreateInfoWithHttpInfo",
    value: function getReceivedDocumentPreCreateInfoWithHttpInfo(companyId, type) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceivedDocumentPreCreateInfo");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getReceivedDocumentPreCreateInfo");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        type: type
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetReceivedDocumentPreCreateInfoResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/info', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Received Document Pre-Create Info
       * Retrieves the information useful while creating a new document.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the received document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetReceivedDocumentPreCreateInfoResponse}
       */
  }, {
    key: "getReceivedDocumentPreCreateInfo",
    value: function getReceivedDocumentPreCreateInfo(companyId, type) {
      return this.getReceivedDocumentPreCreateInfoWithHttpInfo(companyId, type).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Received Documents
       * Lists the received documents.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the received document.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [q] Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListReceivedDocumentsResponse} and HTTP response
       */
  }, {
    key: "listReceivedDocumentsWithHttpInfo",
    value: function listReceivedDocumentsWithHttpInfo(companyId, type, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listReceivedDocuments");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listReceivedDocuments");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        type: type,
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort,
        page: opts.page,
        per_page: opts.perPage,
        q: opts.q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListReceivedDocumentsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Received Documents
       * Lists the received documents.
       * @param {Number} companyId The ID of the company.
       * @param {module:model/String} type The type of the received document.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.q Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListReceivedDocumentsResponse}
       */
  }, {
    key: "listReceivedDocuments",
    value: function listReceivedDocuments(companyId, type, opts) {
      return this.listReceivedDocumentsWithHttpInfo(companyId, type, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Received Document
       * Modifies the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyReceivedDocumentRequest} [modifyReceivedDocumentRequest] Modified document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyReceivedDocumentResponse} and HTTP response
       */
  }, {
    key: "modifyReceivedDocumentWithHttpInfo",
    value: function modifyReceivedDocumentWithHttpInfo(companyId, documentId, opts) {
      opts = opts || {};
      var postBody = opts.modifyReceivedDocumentRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyReceivedDocument");
      }
      var pathParams = {
        company_id: companyId,
        document_id: documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyReceivedDocumentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/{document_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Received Document
       * Modifies the specified document.
       * @param {Number} companyId The ID of the company.
       * @param {Number} documentId The ID of the document.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyReceivedDocumentRequest} opts.modifyReceivedDocumentRequest Modified document.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyReceivedDocumentResponse}
       */
  }, {
    key: "modifyReceivedDocument",
    value: function modifyReceivedDocument(companyId, documentId, opts) {
      return this.modifyReceivedDocumentWithHttpInfo(companyId, documentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Upload Received Document Attachment
       * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [filename] Attachment file name
       * @param {File} [attachment] Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadReceivedDocumentAttachmentResponse} and HTTP response
       */
  }, {
    key: "uploadReceivedDocumentAttachmentWithHttpInfo",
    value: function uploadReceivedDocumentAttachmentWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadReceivedDocumentAttachment");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        filename: opts.filename,
        attachment: opts.attachment
      };
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _UploadReceivedDocumentAttachmentResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/received_documents/attachment', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Upload Received Document Attachment
       * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.filename Attachment file name
       * @param {File} opts.attachment Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadReceivedDocumentAttachmentResponse}
       */
  }, {
    key: "uploadReceivedDocumentAttachment",
    value: function uploadReceivedDocumentAttachment(companyId, opts) {
      return this.uploadReceivedDocumentAttachmentWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ReceivedDocumentsApi;
}();