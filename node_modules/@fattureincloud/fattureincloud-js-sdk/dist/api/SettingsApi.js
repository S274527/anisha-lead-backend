"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreatePaymentAccountResponse = _interopRequireDefault(require("../model/CreatePaymentAccountResponse"));
var _CreatePaymentMethodResponse = _interopRequireDefault(require("../model/CreatePaymentMethodResponse"));
var _CreateVatTypeResponse = _interopRequireDefault(require("../model/CreateVatTypeResponse"));
var _GetPaymentAccountResponse = _interopRequireDefault(require("../model/GetPaymentAccountResponse"));
var _GetPaymentMethodResponse = _interopRequireDefault(require("../model/GetPaymentMethodResponse"));
var _GetVatTypeResponse = _interopRequireDefault(require("../model/GetVatTypeResponse"));
var _ModifyPaymentAccountResponse = _interopRequireDefault(require("../model/ModifyPaymentAccountResponse"));
var _ModifyPaymentMethodResponse = _interopRequireDefault(require("../model/ModifyPaymentMethodResponse"));
var _ModifyVatTypeResponse = _interopRequireDefault(require("../model/ModifyVatTypeResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Settings service.
* @module api/SettingsApi
* @version 2.0.25
*/
var SettingsApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new SettingsApi.
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function SettingsApi(apiClient) {
    _classCallCheck(this, SettingsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Payment Account
     * Creates a new payment account.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentAccountRequest} [createPaymentAccountRequest]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePaymentAccountResponse} and HTTP response
     */
  _createClass(SettingsApi, [{
    key: "createPaymentAccountWithHttpInfo",
    value: function createPaymentAccountWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createPaymentAccountRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createPaymentAccount");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatePaymentAccountResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_accounts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Payment Account
       * Creates a new payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreatePaymentAccountRequest} opts.createPaymentAccountRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePaymentAccountResponse}
       */
  }, {
    key: "createPaymentAccount",
    value: function createPaymentAccount(companyId, opts) {
      return this.createPaymentAccountWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Create Payment Method
       * Creates a new payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreatePaymentMethodRequest} [createPaymentMethodRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreatePaymentMethodResponse} and HTTP response
       */
  }, {
    key: "createPaymentMethodWithHttpInfo",
    value: function createPaymentMethodWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createPaymentMethodRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createPaymentMethod");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreatePaymentMethodResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_methods', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Payment Method
       * Creates a new payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreatePaymentMethodRequest} opts.createPaymentMethodRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreatePaymentMethodResponse}
       */
  }, {
    key: "createPaymentMethod",
    value: function createPaymentMethod(companyId, opts) {
      return this.createPaymentMethodWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Create Vat Type
       * Creates a vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateVatTypeRequest} [createVatTypeRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateVatTypeResponse} and HTTP response
       */
  }, {
    key: "createVatTypeWithHttpInfo",
    value: function createVatTypeWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createVatTypeRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createVatType");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateVatTypeResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/vat_types', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Vat Type
       * Creates a vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateVatTypeRequest} opts.createVatTypeRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateVatTypeResponse}
       */
  }, {
    key: "createVatType",
    value: function createVatType(companyId, opts) {
      return this.createVatTypeWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Payment Account
       * Deletes the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deletePaymentAccountWithHttpInfo",
    value: function deletePaymentAccountWithHttpInfo(companyId, paymentAccountId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deletePaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling deletePaymentAccount");
      }
      var pathParams = {
        company_id: companyId,
        payment_account_id: paymentAccountId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/settings/payment_accounts/{payment_account_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Payment Account
       * Deletes the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deletePaymentAccount",
    value: function deletePaymentAccount(companyId, paymentAccountId) {
      return this.deletePaymentAccountWithHttpInfo(companyId, paymentAccountId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Payment Method
       * Deletes the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deletePaymentMethodWithHttpInfo",
    value: function deletePaymentMethodWithHttpInfo(companyId, paymentMethodId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deletePaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling deletePaymentMethod");
      }
      var pathParams = {
        company_id: companyId,
        payment_method_id: paymentMethodId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/settings/payment_methods/{payment_method_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Payment Method
       * Deletes the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deletePaymentMethod",
    value: function deletePaymentMethod(companyId, paymentMethodId) {
      return this.deletePaymentMethodWithHttpInfo(companyId, paymentMethodId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Vat Type
       * Deletes the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteVatTypeWithHttpInfo",
    value: function deleteVatTypeWithHttpInfo(companyId, vatTypeId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteVatType");
      }
      // verify the required parameter 'vatTypeId' is set
      if (vatTypeId === undefined || vatTypeId === null) {
        throw new Error("Missing the required parameter 'vatTypeId' when calling deleteVatType");
      }
      var pathParams = {
        company_id: companyId,
        vat_type_id: vatTypeId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/settings/vat_types/{vat_type_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Vat Type
       * Deletes the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteVatType",
    value: function deleteVatType(companyId, vatTypeId) {
      return this.deleteVatTypeWithHttpInfo(companyId, vatTypeId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Payment Account
       * Gets the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPaymentAccountResponse} and HTTP response
       */
  }, {
    key: "getPaymentAccountWithHttpInfo",
    value: function getPaymentAccountWithHttpInfo(companyId, paymentAccountId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling getPaymentAccount");
      }
      var pathParams = {
        company_id: companyId,
        payment_account_id: paymentAccountId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetPaymentAccountResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_accounts/{payment_account_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Payment Account
       * Gets the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPaymentAccountResponse}
       */
  }, {
    key: "getPaymentAccount",
    value: function getPaymentAccount(companyId, paymentAccountId, opts) {
      return this.getPaymentAccountWithHttpInfo(companyId, paymentAccountId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Payment Method
       * Gets the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetPaymentMethodResponse} and HTTP response
       */
  }, {
    key: "getPaymentMethodWithHttpInfo",
    value: function getPaymentMethodWithHttpInfo(companyId, paymentMethodId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling getPaymentMethod");
      }
      var pathParams = {
        company_id: companyId,
        payment_method_id: paymentMethodId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetPaymentMethodResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_methods/{payment_method_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Payment Method
       * Gets the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetPaymentMethodResponse}
       */
  }, {
    key: "getPaymentMethod",
    value: function getPaymentMethod(companyId, paymentMethodId, opts) {
      return this.getPaymentMethodWithHttpInfo(companyId, paymentMethodId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Vat Type
       * Gets the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetVatTypeResponse} and HTTP response
       */
  }, {
    key: "getVatTypeWithHttpInfo",
    value: function getVatTypeWithHttpInfo(companyId, vatTypeId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getVatType");
      }
      // verify the required parameter 'vatTypeId' is set
      if (vatTypeId === undefined || vatTypeId === null) {
        throw new Error("Missing the required parameter 'vatTypeId' when calling getVatType");
      }
      var pathParams = {
        company_id: companyId,
        vat_type_id: vatTypeId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetVatTypeResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/vat_types/{vat_type_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Vat Type
       * Gets the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetVatTypeResponse}
       */
  }, {
    key: "getVatType",
    value: function getVatType(companyId, vatTypeId) {
      return this.getVatTypeWithHttpInfo(companyId, vatTypeId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Payment Account
       * Modifies the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyPaymentAccountRequest} [modifyPaymentAccountRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyPaymentAccountResponse} and HTTP response
       */
  }, {
    key: "modifyPaymentAccountWithHttpInfo",
    value: function modifyPaymentAccountWithHttpInfo(companyId, paymentAccountId, opts) {
      opts = opts || {};
      var postBody = opts.modifyPaymentAccountRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyPaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling modifyPaymentAccount");
      }
      var pathParams = {
        company_id: companyId,
        payment_account_id: paymentAccountId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyPaymentAccountResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_accounts/{payment_account_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Payment Account
       * Modifies the specified payment account.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentAccountId The Referred Payment Account Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyPaymentAccountRequest} opts.modifyPaymentAccountRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyPaymentAccountResponse}
       */
  }, {
    key: "modifyPaymentAccount",
    value: function modifyPaymentAccount(companyId, paymentAccountId, opts) {
      return this.modifyPaymentAccountWithHttpInfo(companyId, paymentAccountId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Payment Method
       * Modifies the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyPaymentMethodRequest} [modifyPaymentMethodRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyPaymentMethodResponse} and HTTP response
       */
  }, {
    key: "modifyPaymentMethodWithHttpInfo",
    value: function modifyPaymentMethodWithHttpInfo(companyId, paymentMethodId, opts) {
      opts = opts || {};
      var postBody = opts.modifyPaymentMethodRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyPaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling modifyPaymentMethod");
      }
      var pathParams = {
        company_id: companyId,
        payment_method_id: paymentMethodId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyPaymentMethodResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/payment_methods/{payment_method_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Payment Method
       * Modifies the specified payment method.
       * @param {Number} companyId The ID of the company.
       * @param {Number} paymentMethodId The Referred Payment Method Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyPaymentMethodRequest} opts.modifyPaymentMethodRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyPaymentMethodResponse}
       */
  }, {
    key: "modifyPaymentMethod",
    value: function modifyPaymentMethod(companyId, paymentMethodId, opts) {
      return this.modifyPaymentMethodWithHttpInfo(companyId, paymentMethodId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Vat Type
       * Modifies the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyVatTypeRequest} [modifyVatTypeRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyVatTypeResponse} and HTTP response
       */
  }, {
    key: "modifyVatTypeWithHttpInfo",
    value: function modifyVatTypeWithHttpInfo(companyId, vatTypeId, opts) {
      opts = opts || {};
      var postBody = opts.modifyVatTypeRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyVatType");
      }
      // verify the required parameter 'vatTypeId' is set
      if (vatTypeId === undefined || vatTypeId === null) {
        throw new Error("Missing the required parameter 'vatTypeId' when calling modifyVatType");
      }
      var pathParams = {
        company_id: companyId,
        vat_type_id: vatTypeId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyVatTypeResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/settings/vat_types/{vat_type_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Vat Type
       * Modifies the specified vat type.
       * @param {Number} companyId The ID of the company.
       * @param {Number} vatTypeId The Referred Vat Type Id.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyVatTypeRequest} opts.modifyVatTypeRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyVatTypeResponse}
       */
  }, {
    key: "modifyVatType",
    value: function modifyVatType(companyId, vatTypeId, opts) {
      return this.modifyVatTypeWithHttpInfo(companyId, vatTypeId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return SettingsApi;
}();