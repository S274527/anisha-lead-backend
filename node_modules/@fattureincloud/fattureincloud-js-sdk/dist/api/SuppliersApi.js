"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateSupplierResponse = _interopRequireDefault(require("../model/CreateSupplierResponse"));
var _GetSupplierResponse = _interopRequireDefault(require("../model/GetSupplierResponse"));
var _ListSuppliersResponse = _interopRequireDefault(require("../model/ListSuppliersResponse"));
var _ModifySupplierResponse = _interopRequireDefault(require("../model/ModifySupplierResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Suppliers service.
* @module api/SuppliersApi
* @version 2.0.25
*/
var SuppliersApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new SuppliersApi.
    * @alias module:api/SuppliersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function SuppliersApi(apiClient) {
    _classCallCheck(this, SuppliersApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create Supplier
     * Creates a new supplier.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSupplierRequest} [createSupplierRequest] The supplier to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSupplierResponse} and HTTP response
     */
  _createClass(SuppliersApi, [{
    key: "createSupplierWithHttpInfo",
    value: function createSupplierWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createSupplierRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createSupplier");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateSupplierResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/suppliers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create Supplier
       * Creates a new supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateSupplierRequest} opts.createSupplierRequest The supplier to create
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSupplierResponse}
       */
  }, {
    key: "createSupplier",
    value: function createSupplier(companyId, opts) {
      return this.createSupplierWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Supplier
       * Deletes the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteSupplierWithHttpInfo",
    value: function deleteSupplierWithHttpInfo(companyId, supplierId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteSupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling deleteSupplier");
      }
      var pathParams = {
        company_id: companyId,
        supplier_id: supplierId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/entities/suppliers/{supplier_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Supplier
       * Deletes the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteSupplier",
    value: function deleteSupplier(companyId, supplierId) {
      return this.deleteSupplierWithHttpInfo(companyId, supplierId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Supplier
       * Gets the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSupplierResponse} and HTTP response
       */
  }, {
    key: "getSupplierWithHttpInfo",
    value: function getSupplierWithHttpInfo(companyId, supplierId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling getSupplier");
      }
      var pathParams = {
        company_id: companyId,
        supplier_id: supplierId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetSupplierResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/suppliers/{supplier_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Supplier
       * Gets the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSupplierResponse}
       */
  }, {
    key: "getSupplier",
    value: function getSupplier(companyId, supplierId, opts) {
      return this.getSupplierWithHttpInfo(companyId, supplierId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Suppliers
       * Lists the suppliers.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} [fields] List of comma-separated fields.
       * @param {module:model/String} [fieldset] Name of the fieldset.
       * @param {String} [sort] List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} [page = 1)] The page to retrieve.
       * @param {Number} [perPage = 5)] The size of the page.
       * @param {String} [q] Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSuppliersResponse} and HTTP response
       */
  }, {
    key: "listSuppliersWithHttpInfo",
    value: function listSuppliersWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listSuppliers");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {
        fields: opts.fields,
        fieldset: opts.fieldset,
        sort: opts.sort,
        page: opts.page,
        per_page: opts.perPage,
        q: opts.q
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListSuppliersResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/suppliers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Suppliers
       * Lists the suppliers.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {String} opts.fields List of comma-separated fields.
       * @param {module:model/String} opts.fieldset Name of the fieldset.
       * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
       * @param {Number} opts.page The page to retrieve. (default to 1)
       * @param {Number} opts.perPage The size of the page. (default to 5)
       * @param {String} opts.q Query for filtering the results.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSuppliersResponse}
       */
  }, {
    key: "listSuppliers",
    value: function listSuppliers(companyId, opts) {
      return this.listSuppliersWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Supplier
       * Modifies the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifySupplierRequest} [modifySupplierRequest] The modified Supplier. First level parameters are managed in delta mode.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifySupplierResponse} and HTTP response
       */
  }, {
    key: "modifySupplierWithHttpInfo",
    value: function modifySupplierWithHttpInfo(companyId, supplierId, opts) {
      opts = opts || {};
      var postBody = opts.modifySupplierRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifySupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling modifySupplier");
      }
      var pathParams = {
        company_id: companyId,
        supplier_id: supplierId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifySupplierResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/entities/suppliers/{supplier_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Supplier
       * Modifies the specified supplier.
       * @param {Number} companyId The ID of the company.
       * @param {Number} supplierId The ID of the supplier.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifySupplierRequest} opts.modifySupplierRequest The modified Supplier. First level parameters are managed in delta mode.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifySupplierResponse}
       */
  }, {
    key: "modifySupplier",
    value: function modifySupplier(companyId, supplierId, opts) {
      return this.modifySupplierWithHttpInfo(companyId, supplierId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return SuppliersApi;
}();