"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateWebhooksSubscriptionResponse = _interopRequireDefault(require("../model/CreateWebhooksSubscriptionResponse"));
var _GetWebhooksSubscriptionResponse = _interopRequireDefault(require("../model/GetWebhooksSubscriptionResponse"));
var _ListWebhooksSubscriptionsResponse = _interopRequireDefault(require("../model/ListWebhooksSubscriptionsResponse"));
var _ModifyWebhooksSubscriptionResponse = _interopRequireDefault(require("../model/ModifyWebhooksSubscriptionResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.32
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Webhooks service.
* @module api/WebhooksApi
* @version 2.0.25
*/
var WebhooksApi = exports["default"] = /*#__PURE__*/function () {
  /**
    * Constructs a new WebhooksApi.
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  function WebhooksApi(apiClient) {
    _classCallCheck(this, WebhooksApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
     * Create a Webhook Subscription
     * Register some webhooks Subscriptions.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateWebhooksSubscriptionRequest} [createWebhooksSubscriptionRequest]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateWebhooksSubscriptionResponse} and HTTP response
     */
  _createClass(WebhooksApi, [{
    key: "createWebhooksSubscriptionWithHttpInfo",
    value: function createWebhooksSubscriptionWithHttpInfo(companyId, opts) {
      opts = opts || {};
      var postBody = opts.createWebhooksSubscriptionRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createWebhooksSubscription");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateWebhooksSubscriptionResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/subscriptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Create a Webhook Subscription
       * Register some webhooks Subscriptions.
       * @param {Number} companyId The ID of the company.
       * @param {Object} opts Optional parameters
       * @param {module:model/CreateWebhooksSubscriptionRequest} opts.createWebhooksSubscriptionRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateWebhooksSubscriptionResponse}
       */
  }, {
    key: "createWebhooksSubscription",
    value: function createWebhooksSubscription(companyId, opts) {
      return this.createWebhooksSubscriptionWithHttpInfo(companyId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Delete Webhooks Subscription
       * Delete a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
       */
  }, {
    key: "deleteWebhooksSubscriptionWithHttpInfo",
    value: function deleteWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteWebhooksSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling deleteWebhooksSubscription");
      }
      var pathParams = {
        company_id: companyId,
        subscription_id: subscriptionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/c/{company_id}/subscriptions/{subscription_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Delete Webhooks Subscription
       * Delete a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}
       */
  }, {
    key: "deleteWebhooksSubscription",
    value: function deleteWebhooksSubscription(companyId, subscriptionId) {
      return this.deleteWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Get Webhooks Subscription
       * Get a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetWebhooksSubscriptionResponse} and HTTP response
       */
  }, {
    key: "getWebhooksSubscriptionWithHttpInfo",
    value: function getWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getWebhooksSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling getWebhooksSubscription");
      }
      var pathParams = {
        company_id: companyId,
        subscription_id: subscriptionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetWebhooksSubscriptionResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/subscriptions/{subscription_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Get Webhooks Subscription
       * Get a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetWebhooksSubscriptionResponse}
       */
  }, {
    key: "getWebhooksSubscription",
    value: function getWebhooksSubscription(companyId, subscriptionId) {
      return this.getWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * List Webhooks Subscriptions
       * List active webhooks subscriptions.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListWebhooksSubscriptionsResponse} and HTTP response
       */
  }, {
    key: "listWebhooksSubscriptionsWithHttpInfo",
    value: function listWebhooksSubscriptionsWithHttpInfo(companyId) {
      var postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listWebhooksSubscriptions");
      }
      var pathParams = {
        company_id: companyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListWebhooksSubscriptionsResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/subscriptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * List Webhooks Subscriptions
       * List active webhooks subscriptions.
       * @param {Number} companyId The ID of the company.
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListWebhooksSubscriptionsResponse}
       */
  }, {
    key: "listWebhooksSubscriptions",
    value: function listWebhooksSubscriptions(companyId) {
      return this.listWebhooksSubscriptionsWithHttpInfo(companyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
       * Modify Webhooks Subscription
       * Edit a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyWebhooksSubscriptionRequest} [modifyWebhooksSubscriptionRequest]
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyWebhooksSubscriptionResponse} and HTTP response
       */
  }, {
    key: "modifyWebhooksSubscriptionWithHttpInfo",
    value: function modifyWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId, opts) {
      opts = opts || {};
      var postBody = opts.modifyWebhooksSubscriptionRequest;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyWebhooksSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling modifyWebhooksSubscription");
      }
      var pathParams = {
        company_id: companyId,
        subscription_id: subscriptionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['OAuth2AuthenticationCodeFlow'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ModifyWebhooksSubscriptionResponse["default"];
      return this.apiClient.callApi('/c/{company_id}/subscriptions/{subscription_id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
       * Modify Webhooks Subscription
       * Edit a webhooks subscription.
       * @param {Number} companyId The ID of the company.
       * @param {String} subscriptionId The ID of the subscription.
       * @param {Object} opts Optional parameters
       * @param {module:model/ModifyWebhooksSubscriptionRequest} opts.modifyWebhooksSubscriptionRequest
       * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyWebhooksSubscriptionResponse}
       */
  }, {
    key: "modifyWebhooksSubscription",
    value: function modifyWebhooksSubscription(companyId, subscriptionId, opts) {
      return this.modifyWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return WebhooksApi;
}();