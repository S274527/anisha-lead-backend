"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _superagent = _interopRequireDefault(require("superagent"));
var _OAuth2AuthorizationCodeParams = _interopRequireDefault(require("./OAuth2AuthorizationCodeParams"));
var _OAuth2AuthorizationCodeTokenResponse = _interopRequireDefault(require("./OAuth2AuthorizationCodeTokenResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * The OAuth2AuthorizationCodeManager oauth module.
 * @module oauth2/OAuth2AuthorizationCodeManager
 */
var OAuth2AuthorizationCodeManager = exports["default"] = /*#__PURE__*/function () {
  /**
     * Constructs a new <code>OAuth2AuthorizationCodeManager</code>.
     * @param {String} clientId The client id.
     * @param {String} clientSecret The client secret.
     * @param {String} redirectUri The redirect uri.
     * @param {String} baseUri The base uri.
     */
  function OAuth2AuthorizationCodeManager(clientId, clientSecret, redirectUri) {
    var baseUri = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'https://api-v2.fattureincloud.it';
    _classCallCheck(this, OAuth2AuthorizationCodeManager);
    /**
       * The client id.
       * @member {String} clientId
       */
    _defineProperty(this, "clientId", void 0);
    /**
       * The client secret.
       * @member {String} clientSecret
       */
    _defineProperty(this, "clientSecret", void 0);
    /**
       * The redirect uri.
       * @member {String} redirectUri
       */
    _defineProperty(this, "redirectUri", void 0);
    /**
       * The base uri.
       * @member {String} baseUri
       */
    _defineProperty(this, "baseUri", 'https://api-v2.fattureincloud.it');
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.redirectUri = redirectUri;
    this.baseUri = baseUri;
  }

  /**
     * Get the authorization url.
     * @param {Array.<oauth2/Scope>} scopes The scopes.
     * @return {String} The query.
     */
  _createClass(OAuth2AuthorizationCodeManager, [{
    key: "getAuthorizationUrl",
    value: function getAuthorizationUrl(scopes, state) {
      var authorizationUri = "".concat(this.baseUri, "/oauth/authorize");
      var scopeStr = OAuth2AuthorizationCodeManager.getScopeString(scopes);
      var params = {
        response_type: 'code',
        client_id: this.clientId,
        redirect_uri: this.redirectUri,
        scope: scopeStr,
        state: state
      };
      var query = new URLSearchParams(params).toString();
      return "".concat(authorizationUri, "?").concat(query);
    }

    /**
     * Extracts parameters from a URL and returns an OAuth2AuthorizationCodeParams object.
     * @param {string} url - The URL containing the parameters.
     * @returns {OAuth2AuthorizationCodeParams} - The OAuth2AuthorizationCodeParams object containing the extracted parameters.
     */
  }, {
    key: "getParamsFromUrl",
    value: function getParamsFromUrl(url) {
      var query = url.split('?')[1];
      var params = new URLSearchParams(query);
      return new _OAuth2AuthorizationCodeParams["default"](params.get('code'), params.get('state'));
    }

    /**
     * Fetches the token using the provided authorization code.
     * @param {string} code - The authorization code.
     * @returns {Promise} - A promise that resolves with the token response.
     */
  }, {
    key: "fetchToken",
    value: function fetchToken(code) {
      var tokenUri = "".concat(this.baseUri, "/oauth/token");
      var data = {
        grant_type: 'authorization_code',
        client_id: this.clientId,
        client_secret: this.clientSecret,
        redirect_uri: this.redirectUri,
        code: code
      };
      return this.tokenRequest(tokenUri, data);
    }

    /**
     * Refreshes the access token using the provided refresh token.
     * @param {string} refreshToken - The refresh token to use for token refresh.
     * @returns {Promise} - A promise that resolves with the refreshed access token.
     */
  }, {
    key: "refreshToken",
    value: function refreshToken(_refreshToken) {
      var tokenUri = "".concat(this.baseUri, "/oauth/token");
      var data = {
        grant_type: 'refresh_token',
        client_id: this.clientId,
        client_secret: this.clientSecret,
        refresh_token: _refreshToken
      };
      return this.tokenRequest(tokenUri, data);
    }
  }, {
    key: "tokenRequest",
    value: function tokenRequest(uri, data) {
      return _superagent["default"].post(uri).send(data).then(function (_ref) {
        var body = _ref.body;
        return new _OAuth2AuthorizationCodeTokenResponse["default"](body.token_type, body.access_token, body.refresh_token, body.expires_in);
      })["catch"](function (e) {
        throw new Error(e.response.text);
      });
    }
  }], [{
    key: "getScopeString",
    value: function getScopeString(scopes) {
      return scopes.map(function (scope) {
        return scope.toString();
      }).join(' ');
    }
  }]);
  return OAuth2AuthorizationCodeManager;
}();